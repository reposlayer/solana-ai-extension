{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAcA;AACA;;AAEA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA","sources":["webpack://solana-ai-explorer/./src/content/dataExtraction.js","webpack://solana-ai-explorer/./src/content/insightInjection.js","webpack://solana-ai-explorer/webpack/bootstrap","webpack://solana-ai-explorer/webpack/runtime/define property getters","webpack://solana-ai-explorer/webpack/runtime/hasOwnProperty shorthand","webpack://solana-ai-explorer/webpack/runtime/make namespace object","webpack://solana-ai-explorer/./src/content/index.js"],"sourcesContent":["export function extractBlockchainData() {\n    let data = {};\n    \n    if (window.location.hostname.includes('solana.com')) {\n      data = extractSolanaExplorerData();\n    } else if (window.location.hostname.includes('solscan.io')) {\n      data = extractSolscanData();\n    } else if (window.location.hostname.includes('solanabeach.io')) {\n      data = extractSolanaBeachData();\n    }\n    \n    return data;\n  }\n  \n  function extractSolanaExplorerData() {\n    let data = {};\n    \n    if (window.location.pathname.includes('/address/')) {\n      data.type = 'account';\n      data.address = document.querySelector('.address-value')?.textContent.trim();\n    } else if (window.location.pathname.includes('/tx/')) {\n      data.type = 'transaction';\n      data.signature = document.querySelector('.signature-value')?.textContent.trim();\n    }\n    \n    return data;\n  }\n  \n  function extractSolscanData() {\n    let data = {};\n    \n    if (window.location.pathname.includes('/account/')) {\n      data.type = 'account';\n      data.address = document.querySelector('.address-content')?.textContent.trim();\n    } else if (window.location.pathname.includes('/tx/')) {\n      data.type = 'transaction';\n      data.signature = document.querySelector('.transaction-hash')?.textContent.trim();\n    }\n    \n    return data;\n  }\n  \n  function extractSolanaBeachData() {\n    let data = {};\n    \n    if (window.location.pathname.includes('/address/')) {\n      data.type = 'account';\n      data.address = document.querySelector('.address-header__address')?.textContent.trim();\n    } else if (window.location.pathname.includes('/transaction/')) {\n      data.type = 'transaction';\n      data.signature = document.querySelector('.transaction__signature')?.textContent.trim();\n    }\n    \n    return data;\n  }","export function insertAIInsights(insights) {\n    const existingInsightDiv = document.getElementById('ai-explorer-insights');\n    if (existingInsightDiv) {\n      existingInsightDiv.remove();\n    }\n  \n    const insightDiv = document.createElement('div');\n    insightDiv.id = 'ai-explorer-insights';\n    insightDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      width: 300px;\n      padding: 15px;\n      background-color: #f0f0f0;\n      border-radius: 8px;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n      z-index: 1000;\n      max-height: 80vh;\n      overflow-y: auto;\n    `;\n    \n    let content = `<h3 style=\"margin-top: 0; color: #333;\">AI Insights</h3>`;\n    content += `<p style=\"color: #666;\">${insights}</p>`;\n    \n    // Add buttons for additional actions\n    content += `\n      <button id=\"ai-explorer-more-details\" style=\"margin-right: 10px;\">More Details</button>\n      <button id=\"ai-explorer-scam-detection\">Detect Potential Scam</button>\n    `;\n    \n    insightDiv.innerHTML = content;\n    document.body.appendChild(insightDiv);\n    \n    // Add event listeners for buttons\n    document.getElementById('ai-explorer-more-details').addEventListener('click', getMoreDetails);\n    document.getElementById('ai-explorer-scam-detection').addEventListener('click', detectPotentialScam);\n  }\n  \n  function getMoreDetails() {\n    chrome.runtime.sendMessage({action: \"getMoreDetails\", data: extractCurrentPageData()}, (response) => {\n      if (response && response.details) {\n        alert(response.details);\n      }\n    });\n  }\n  \n  function detectPotentialScam() {\n    chrome.runtime.sendMessage({action: \"detectPotentialScam\", data: extractCurrentPageData()}, (response) => {\n      if (response) {\n        if (response.isScam) {\n          alert(`Potential scam detected! Reason: ${response.reason}`);\n        } else {\n          alert('No immediate signs of scam detected. Always do your own research.');\n        }\n      }\n    });\n  }\n  \n  function extractCurrentPageData() {\n    // This function should be implemented to extract the current page's data\n    // It could reuse logic from dataExtraction.js\n    // For now, we'll return a placeholder\n    return { type: 'account', address: 'current-page-address' };\n  }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","console.log('Solana AI Explorer content script loaded');\n\nimport { extractBlockchainData } from './dataExtraction';\nimport { insertAIInsights } from './insightInjection';\n\nfunction main() {\n  console.log('Main function called');\n  const data = extractBlockchainData();\n  console.log('Extracted data:', data);\n  if (Object.keys(data).length > 0) {\n    chrome.runtime.sendMessage({action: \"getAIInsights\", data: data}, (response) => {\n      console.log('Received response from background script:', response);\n      if (chrome.runtime.lastError) {\n        console.error(\"Error communicating with AI model:\", chrome.runtime.lastError);\n      } else if (response && response.insights) {\n        insertAIInsights(response.insights);\n      }\n    });\n  } else {\n    console.log('No data extracted');\n  }\n}\n\n// Run the main function when the page is fully loaded\nwindow.addEventListener('load', main);\n\n// Re-run main function when URL changes (for single-page applications)\nlet lastUrl = location.href; \nnew MutationObserver(() => {\n  const url = location.href;\n  if (url !== lastUrl) {\n    lastUrl = url;\n    console.log('URL changed, re-running main function');\n    main();\n  }\n}).observe(document, {subtree: true, childList: true});"],"names":[],"sourceRoot":""}